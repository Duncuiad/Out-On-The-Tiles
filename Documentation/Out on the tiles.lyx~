#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Graphics
	filename Out on the Tiles.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Section
Domain Tiles Generation [Geometry Processing and Space Indexing]
\end_layout

\begin_layout Subsection
Square Triangle Tilings
\end_layout

\begin_layout Standard
Square-triangle tilings allow for more varied geometry and therefore player
 freedom in a sandbox context, when compared to all square or all triangle
 regular tilings.
 This variety however comes with challenges both in generating the actual
 tiling and in the impossibility of random-accessing the single elements.
\end_layout

\begin_layout Standard
The rules ensuring a proper plane-filling tiling can be explained by looking
 at its vertices: squares account for 3/12 of a 360Â° angle, while equilateral
 triangles account for 2/12.
 This forces the set of faces surrounding a vertex to always contain an
 even number of squares (i.
 e.
 0, 2 or 4), with the rest made up by triangles.
\end_layout

\begin_layout Standard
The most straightforward way to attempt at generating such a tiling would
 be to use a Wave-Function-Collapse-like (WFC) algorithm, starting from
 a single tile and then propagating the generation past the edges, while
 using as rules the vertex completion right above.
 This method however has a few problems when we intend for parts of the
 world to be lazy-initialized, for instance generating a section of the
 map only when the player comes in close enough proximity.
 Heading far away from the spawn tile and then returning there from a different
 direction would generate a loop of collapsed tiles whose interior is a
 region that is very unlikely to admit a closable tiling, i.
 e.
 there may be regions of the map that can only be covered by tiles that
 intersect ones previously generated.
 A second issue with a WFC method is that linking tile collapse to player
 exploration results in a non-deterministic world generation, which may
 unnecessarily make other parts of the project less straighforward.
\end_layout

\begin_layout Standard
These problems are shared by any method attempting to expand the tiling
 past the border of previously determined tiles, so a flip in the overall
 approach is required.
\end_layout

\begin_layout Standard
To ensure compatibility with lazy initialization and deterministic world
 generation, subdivision techniques provide a better approach: if we start
 with one 
\begin_inset Quotes eld
\end_inset

world tile
\begin_inset Quotes erd
\end_inset

 (either a square or a triangle) and a set of rules on how to subdivide
 each polygon as a collection of smaller polygons, ensuring that correct
 adjacency between tiles carries on to the next iteration, it is possible
 to apply those rules to the first tile, then to each of those it gets subdivide
d into, and so on until an arbitrary degree of subdivision is reached.
\end_layout

\begin_layout Standard
The power of this method relies on the fact that if we are able to keep
 track of successive subdivisions in a 
\begin_inset Quotes eld
\end_inset

subdivision tree
\begin_inset Quotes erd
\end_inset

, then it is not necessary to completely subdivide the whole world at once:
 if the player approaches areas of the world where the subdivision hasn't
 yet reached its maximal degree, it is sufficient to apply subdivision to
 an intermidiate node in the tree such that only regions in an immediate
 neighbourhood of the player get completely subdivided.
 This method thus allows for an adaptive resolution of the tilings that
 leaves areas far away from the player only partially subdivided, affording
 significant savings in memory occupancy and processing power.
\end_layout

\begin_layout Subsection
Inflation Techniques
\end_layout

\begin_layout Standard
Inflation techniques are subdivision algorithms that turn a given tiling
 into another with a higher resolution.
 Their name comes from the fact that each subdivision step is usually preceeded
 by an 
\begin_inset Quotes eld
\end_inset

inflation
\begin_inset Quotes erd
\end_inset

, i.
 e.
 a dilation of the plane, by a constant value (the 
\begin_inset Quotes eld
\end_inset

inflation constant
\begin_inset Quotes erd
\end_inset

) that is intrinsic to the particular technique being used.
 The reason for such inflation is that it is usually desirable to ensure
 that parent and child tilings share the same edge-length.
 The inflation step however will never be performed in this project, since
 subdivision will be done 
\begin_inset Quotes eld
\end_inset

in place
\begin_inset Quotes erd
\end_inset

, so that vertices in the parent tiling are ensured to be vertices in the
 child as well.
\end_layout

\begin_layout Standard
The inflation technique used by this project, which has an inflation constant
 of 
\begin_inset Formula $\gamma=\sqrt{2+\sqrt{3}}$
\end_inset

, is an adaptation of the one found in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

, which sadly doesn't actually work.
 Without diving into too much detail, the reason why the original technique
 outlined by the paper doesn't work is that, as written, adjacency between
 certain tiles is broken after the first full subdivision, making it impossible
 to arbitrarily repeat the process.
 My contribution consists in the introduction of a new family of triangles
 (which I call 
\begin_inset Quotes eld
\end_inset

true triangles
\begin_inset Quotes erd
\end_inset

), a new property for edges (their coloring can be either 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

) and in devising an update to each subdivision rule in order to account
 for the introduction of such additions.
 All of this will make sense as soon as you're through reading the actual
 subdivision rules detailed below.
\end_layout

\begin_layout Standard
To know how each polygon is subdivided it is necessary to distinguish two
 different categories of triangles and of squares.
 Both categories of triangles are made up of two blue edges and one red
 edge, while squares are separated into the category of squares with four
 red edges (
\begin_inset Quotes eld
\end_inset

red squares
\begin_inset Quotes erd
\end_inset

) and that of squares with two blue and two red edges (
\begin_inset Quotes eld
\end_inset

red-blue squares
\begin_inset Quotes erd
\end_inset

).
 Keeping figure 
\color red
[insert picture]
\color black
 as reference, we can see that the color of the edges reflects how they
 are split by performing a subdivision step: red edges turn into two edges
 sharing a vertex located in the interior of the parent polygon, while the
 corresponding vertex for blue edges falls outside the parent tile.
 Coloring the edges is thus a way of knowing how they will be subdivided,
 and each two adjacent tiles must share edges of opposite color, so that
 adjacency can carry on to their children.
\end_layout

\begin_layout Standard
We've seen how subdivision turns each edge into a pair of smaller edges
 sharing a displaced midpoint, but to know how these edges have to be colored
 (to be able to perform a new subdivision step) it is necessary to have
 a little more information.
 We will call 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 edges those which turn into edges of the same color and 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 edges those which swap colors when subdivided.
 We can see that to ensure correct color-pairing to the children edges,
 true edges must be paired with true edges between adjacent faces and the
 same applies to false edges.
 In summary, all of this means that each of a tile's edges has two properties,
 and between adjacent tiles a true blue edge must be paired to a true red
 edge, while a false red to a false blue.
 
\end_layout

\begin_layout Standard
The two categories of triangles mentioned above are determined by this second
 property of their edges: we'll call 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 triangles those whose edges are all true edges and 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 triangles those who only have false edges.
 In the figures showing each polygon's subdivision, true triangles are identifie
d by a black spot in the middle, while for squares, their true edges are
 denoted by a black spot right next to the edge.
 Clearly, true triangles can only be adjacent to either other true triangles
 or any kind of square, but only through one of the square's true edges.
 Of course, the exact opposite applies to false triangles.
 Figure 
\color red
[insert picture]
\color black
 shows how this rule induces, onto the tiling, two distinct graphs, whose
 nodes are the center point of the triangular tiles, and whose edges cross
 squares from side to side in accordance to their 
\begin_inset Quotes eld
\end_inset

trueness
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
The Domain Mesh
\end_layout

\begin_layout Subsection
Generating the Domain Mesh
\end_layout

\begin_layout Subsubsection
Deterministic Vertex Coloring
\end_layout

\begin_layout Subsection
Extra
\end_layout

\begin_layout Subsubsection
Using the inflation tree for memory optimization
\end_layout

\begin_layout Section
Domain Subdivision into blocks [Space Indexing]
\end_layout

\begin_layout Subsection
A word on Quad/Octrees for voxel engines
\end_layout

\begin_layout Subsection
Block Indexing
\end_layout

\begin_layout Subsubsection
Squares
\end_layout

\begin_layout Subsubsection
Triangles
\end_layout

\begin_layout Subsection
Meshing
\end_layout

\begin_layout Subsubsection
Squares
\end_layout

\begin_layout Subsubsection
Triangles
\end_layout

\begin_layout Section
Architectural Elements personalization [Group Theory]
\end_layout

\begin_layout Subsection
The element design UI
\end_layout

\begin_layout Subsection
Using groups to generate symmetric meshes
\end_layout

\begin_layout Subsection
Example: Columns
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "ZeUn06"
key "key-1"
literal "false"

\end_inset

Xiangbing Zeng, Goran Ungar.
 Inflation rules of square-triangle tilings: from approximants to dodecagonal
 liquid quasicrystals.
 Philosophical Magazine, Taylor & Francis, 2006, 86 (06-08), pp.1093- 1103.
 ff10.1080/14786430500363148ff.
 ffhal-00513624f
\end_layout

\end_body
\end_document
